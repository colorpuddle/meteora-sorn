# LLM.txt - Fun Launch Scaffold

**AI-Optimized Token Launchpad Development Guide**

## 🎯 Quick AI Context

Fun Launch is a **production-ready Next.js application** for building token launchpads with Meteora protocol integration. Features include:
- ✅ **Token Discovery**: Real-time token exploration with filters & search
- ✅ **Trading Interface**: Complete buy/sell terminal with slippage controls
- ✅ **Portfolio Tracking**: Wallet integration with position management
- ✅ **Protocol Integration**: DBC, DAMM, DLMM support out-of-the-box
- ✅ **Mobile Responsive**: Optimized for all devices with modern UI

**AI Navigation**: This is the detailed implementation guide for the Fun Launch scaffold.

## 🚀 Instant Setup & Development

### **Quick Start (3 Steps)**
```bash
# 1. Copy scaffold to your project
cp -r scaffolds/fun-launch /path/to/your-launchpad
cd /path/to/your-launchpad

# 2. Environment setup
cp .env.example .env
# Edit .env with your settings:
# NEXT_PUBLIC_RPC_URL=https://your-rpc-endpoint.com
# NEXT_PUBLIC_NETWORK=mainnet-beta

# 3. Install & run
pnpm install && pnpm dev
# Opens http://localhost:3000
```

### **Environment Configuration**
```bash
# Required Environment Variables
NEXT_PUBLIC_RPC_URL=https://api.mainnet-beta.solana.com
NEXT_PUBLIC_NETWORK=mainnet-beta  # or 'devnet' for testing

# Optional but Recommended
NEXT_PUBLIC_ANALYTICS_ID=your_analytics_id
NEXT_PUBLIC_SENTRY_DSN=your_sentry_dsn
```

## 📁 Detailed Project Architecture

### **Complete File Structure**
```
fun-launch/
├── 📄 LLM.txt                     # THIS FILE - AI guidance
├── 📄 package.json                # Dependencies & scripts
├── 📄 next.config.ts               # Next.js configuration
├── 📄 tailwind.config.js           # Styling configuration
├── 📄 .env.example                 # Environment template
│
├── 📁 src/                         # Source code (AI can modify)
│   ├── 📁 components/              # UI components
│   │   ├── 📁 ui/                  # Base components
│   │   │   ├── button.tsx          # Button component
│   │   │   ├── Skeleton.tsx        # Loading skeletons
│   │   │   ├── Dialog/             # Modal dialogs
│   │   │   └── Page/               # Page wrapper
│   │   ├── 📁 Token/               # Token-specific components
│   │   │   ├── TokenCard/          # Token display cards
│   │   │   ├── TokenHeader/        # Token page header
│   │   │   ├── TokenChart/         # Price charts
│   │   │   ├── TokenIcon/          # Token icons
│   │   │   └── TokenTable/         # Token data tables
│   │   ├── 📁 Terminal/            # Trading interface
│   │   │   └── index.tsx           # Main trading terminal
│   │   ├── 📁 Table/               # Data tables
│   │   ├── 📁 Explore/             # Token exploration
│   │   ├── 📁 Header.tsx           # App header/navigation
│   │   └── 📁 CreatePoolButton.tsx # Pool creation
│   ├── 📁 pages/                   # Next.js routes
│   │   ├── _app.tsx                # App wrapper & providers
│   │   ├── _document.tsx           # HTML document structure
│   │   ├── index.tsx               # Home/explore page
│   │   ├── create-pool.tsx         # Pool creation page
│   │   ├── token/
│   │   │   └── [tokenId].tsx       # Dynamic token detail pages
│   │   └── api/                    # API routes
│   │       ├── send-transaction.ts # Transaction handling
│   │       └── upload.ts           # File upload
│   ├── 📁 contexts/                # React contexts for state
│   │   ├── DataStreamProvider.tsx  # Real-time data streaming
│   │   ├── ExploreProvider.tsx     # Token exploration state
│   │   ├── TokenChartProvider.tsx  # Chart data management
│   │   └── types.ts                # Context type definitions
│   ├── 📁 hooks/                   # Custom React hooks
│   │   ├── queries.tsx             # Data fetching hooks
│   │   ├── useMobile.ts            # Mobile detection
│   │   ├── useSendTransaction.ts   # Transaction hooks
│   │   └── useExploreGemsTokenList.ts # Token list management
│   ├── 📁 lib/                     # Utility functions
│   │   ├── utils.ts                # General utilities
│   │   ├── jotai.ts                # State management
│   │   ├── device.ts               # Device detection
│   │   └── format/                 # Formatting utilities
│   │       ├── date.ts             # Date formatting
│   │       └── number.ts           # Number formatting
│   ├── 📁 types/                   # TypeScript definitions
│   │   ├── fancytypes.ts           # Custom type definitions
│   │   └── jupiter.d.ts            # Jupiter API types
│   ├── 📁 icons/                   # SVG icons & components
│   ├── 📁 constants/               # App constants
│   └── 📁 styles/                  # Global styles
│       └── globals.css             # Global CSS
│
├── 📁 public/                      # Static assets (AI can modify)
│   ├── favicon.ico                 # App favicon
│   ├── coins/                      # Token icons
│   │   └── unknown.svg             # Default token icon
│   └── *.svg                       # Various UI icons
│
└── 📄 README.md                   # Project documentation
```

## 🎯 Core Application Features

### **1. Token Explorer (Home Page)**
- **Location**: `src/pages/index.tsx`
- **Key Components**: `ExploreGrid`, `ExploreProvider`, `MobileExploreTabs`
- **Features**:
  - ✅ Real-time token listings with WebSocket updates
  - ✅ Advanced filtering (age, volume, market cap, launchpad)
  - ✅ Multi-column sorting and search functionality
  - ✅ Mobile-optimized tabs for different token categories
  - ✅ Infinite scroll and pagination
  - ✅ Paused/active pool indicators

### **2. Token Detail Pages**
- **Location**: `src/pages/token/[tokenId].tsx`
- **Key Components**: `TokenHeader`, `TokenChart`, `Terminal`, `TokenTable`
- **Features**:
  - ✅ Interactive TradingView charts with technical indicators
  - ✅ Complete trading terminal with buy/sell functionality
  - ✅ Token metadata, social links, and statistics
  - ✅ Holder distribution and transaction history
  - ✅ Real-time price updates and order book data

### **3. Trading Terminal**
- **Location**: `src/components/Terminal/index.tsx`
- **Integration**: Jupiter aggregator for best prices
- **Features**:
  - ✅ Buy/sell interface with slippage controls
  - ✅ Transaction preview and confirmation
  - ✅ Wallet balance display and validation
  - ✅ Priority fee optimization
  - ✅ Transaction status tracking

### **4. Pool Creation Interface**
- **Location**: `src/pages/create-pool.tsx`
- **Component**: `CreatePoolButton`
- **Backend Integration**: Calls studio DBC actions via API
- **Features**:
  - ✅ Token launch with bonding curve
  - ✅ Custom pool parameters
  - ✅ Integration with Meteora protocols

## 🎨 AI Customization Patterns

### **Pattern 1: Complete Branding Overhaul**
```typescript
// 1. Update src/components/Header.tsx
const SITE_CONFIG = {
  name: "Your Launchpad Name",
  logo: "/your-brand-logo.svg",
  tagline: "Your catchy tagline",
  description: "Your platform description"
};

// 2. Modify tailwind.config.js for brand colors
module.exports = {
  theme: {
    extend: {
      colors: {
        brand: {
          50: '#fef7ee',   // Lightest
          100: '#fef3e2',
          500: '#f97316',  // Primary brand color
          600: '#ea580c',
          900: '#9a3412'   // Darkest
        },
        accent: '#your-accent-color'
      },
      fontFamily: {
        'brand': ['Your Custom Font', 'sans-serif']
      }
    }
  }
}

// 3. Update public/ assets
// - Replace favicon.ico with your icon
// - Add your-brand-logo.svg to public/
// - Update og-image for social sharing

// 4. Modify src/pages/_document.tsx for meta tags
<Head>
  <title>Your Launchpad - Token Discovery Platform</title>
  <meta name="description" content="Your platform description" />
  <meta property="og:title" content="Your Launchpad" />
  <meta property="og:image" content="/og-image.png" />
</Head>
```

### **Pattern 2: Add New Token Categories/Filters**
```typescript
// 1. Update src/contexts/ExploreProvider.tsx
const CUSTOM_FILTERS = {
  category: ['meme', 'gaming', 'defi', 'nft', 'ai'],
  minMarketCap: [1000, 10000, 100000],
  launchpad: ['pump.fun', 'your-launchpad', 'meteora']
};

// 2. Modify src/components/Explore/ExploreColumn.tsx
const CategoryFilter = () => {
  const [selectedCategory, setSelectedCategory] = useState('all');
  
  return (
    <select onChange={(e) => setSelectedCategory(e.target.value)}>
      <option value="all">All Categories</option>
      {CUSTOM_FILTERS.category.map(cat => (
        <option key={cat} value={cat}>{cat}</option>
      ))}
    </select>
  );
};

// 3. Add filter logic to token list
const filteredTokens = tokens.filter(token => {
  if (selectedCategory !== 'all') {
    return token.category === selectedCategory;
  }
  return true;
});
```

### **Pattern 3: Custom Trading Features**
```typescript
// 1. Create src/hooks/useAdvancedTrading.ts
export function useAdvancedTrading() {
  const [orderType, setOrderType] = useState<'market' | 'limit'>('market');
  const [stopLoss, setStopLoss] = useState<number | null>(null);
  
  const executeAdvancedOrder = async (params) => {
    if (orderType === 'limit') {
      // Implement limit order logic
      return await executeLimitOrder(params);
    }
    // Default market order
    return await executeMarketOrder(params);
  };
  
  return {
    orderType,
    setOrderType,
    stopLoss,
    setStopLoss,
    executeAdvancedOrder
  };
}

// 2. Enhance src/components/Terminal/index.tsx
const Terminal = () => {
  const { executeAdvancedOrder } = useAdvancedTrading();
  
  return (
    <div className="trading-terminal">
      {/* Order type selector */}
      <OrderTypeSelector />
      
      {/* Stop loss input */}
      <StopLossInput />
      
      {/* Advanced order button */}
      <button onClick={() => executeAdvancedOrder(orderParams)}>
        Execute Advanced Order
      </button>
    </div>
  );
};
```

### **Pattern 4: Add New Launchpad Integration**
```typescript
// 1. Create src/hooks/useCustomLaunchpad.ts
export function useCustomLaunchpad() {
  const createCustomPool = async (tokenParams) => {
    // Call your custom launchpad API
    const response = await fetch('/api/custom-launchpad', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(tokenParams)
    });
    
    return await response.json();
  };
  
  return { createCustomPool };
}

// 2. Add to src/icons/ for launchpad branding
export const CustomLaunchpadIcon = () => (
  <svg viewBox="0 0 24 24" className="w-4 h-4">
    {/* Your custom icon SVG */}
  </svg>
);

// 3. Update token display logic in TokenCard
const getLaunchpadIcon = (launchpad: string) => {
  switch (launchpad) {
    case 'pump.fun': return <PumpfunIcon />;
    case 'your-launchpad': return <CustomLaunchpadIcon />;
    default: return <DefaultIcon />;
  }
};
```

## 🔄 Studio Backend Integration

### **Full-Stack Token Launch Flow**
```typescript
// Frontend: src/pages/api/launch-token.ts
export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  try {
    // 1. Validate frontend parameters
    const tokenParams = validateTokenParams(req.body);
    
    // 2. Configure studio script
    const dbcConfig = {
      quoteMint: tokenParams.quoteMint,
      totalTokenSupply: tokenParams.supply,
      initialMarketCap: tokenParams.initialMC,
      migrationMarketCap: tokenParams.migrationMC,
      rpcUrl: process.env.RPC_URL,
      keypairFilePath: process.env.KEYPAIR_PATH,
      dryRun: false
    };
    
    // 3. Execute studio DBC script
    const result = await executeStudioScript('dbc-create-pool', dbcConfig);
    
    // 4. Return results to frontend
    res.json({
      success: true,
      tokenMint: result.tokenMint,
      poolAddress: result.poolAddress,
      transactionSignature: result.signature
    });
  } catch (error) {
    res.status(500).json({ success: false, error: error.message });
  }
}

// Frontend: src/components/CreatePoolButton.tsx
const CreatePoolButton = () => {
  const [isCreating, setIsCreating] = useState(false);
  const { publicKey } = useWallet();
  
  const handleCreatePool = async () => {
    if (!publicKey) {
      toast.error('Please connect your wallet');
      return;
    }
    
    setIsCreating(true);
    try {
      // Call backend API
      const response = await fetch('/api/launch-token', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          name: tokenName,
          symbol: tokenSymbol,
          supply: totalSupply,
          initialMC: initialMarketCap
        })
      });
      
      const result = await response.json();
      
      if (result.success) {
        toast.success('Token launched successfully!');
        router.push(`/token/${result.tokenMint}`);
      } else {
        toast.error(result.error);
      }
    } catch (error) {
      toast.error('Failed to launch token');
    } finally {
      setIsCreating(false);
    }
  };
  
  return (
    <button 
      onClick={handleCreatePool}
      disabled={isCreating || !publicKey}
      className="bg-brand-500 hover:bg-brand-600 px-6 py-3 rounded-lg"
    >
      {isCreating ? 'Launching...' : 'Launch Token'}
    </button>
  );
};
```

## 📚 Component Reference & API

### **Core UI Components**

#### **TokenCard Component**
```typescript
// Usage in token lists
<TokenCard
  token={{
    address: "token_mint_address",
    name: "Token Name",
    symbol: "SYMBOL",
    price: 0.001,
    marketCap: 100000,
    volume24h: 50000,
    priceChange24h: 5.2,
    launchpad: "pump.fun"
  }}
  onClick={(token) => router.push(`/token/${token.address}`)}
  showChart={true}
  variant="default" // or "compact", "detailed"
/>

// Props interface
interface TokenCardProps {
  token: TokenData;
  onClick?: (token: TokenData) => void;
  showChart?: boolean;
  variant?: 'default' | 'compact' | 'detailed';
  className?: string;
}
```

#### **Trading Terminal Component**
```typescript
// Usage in token detail pages
<Terminal
  tokenAddress="token_mint_address"
  poolAddress="pool_address"
  baseToken={{ symbol: "SYMBOL", decimals: 9 }}
  quoteToken={{ symbol: "SOL", decimals: 9 }}
  onSwapSuccess={(signature) => {
    toast.success(`Swap successful: ${signature}`);
    refreshBalances();
  }}
  onSwapError={(error) => {
    toast.error(`Swap failed: ${error.message}`);
  }}
/>

// Props interface
interface TerminalProps {
  tokenAddress: string;
  poolAddress: string;
  baseToken: TokenInfo;
  quoteToken: TokenInfo;
  onSwapSuccess?: (signature: string) => void;
  onSwapError?: (error: Error) => void;
  className?: string;
}
```

#### **TokenChart Component**
```typescript
// Usage for price visualization
<TokenChart
  tokenAddress="token_mint_address"
  data={priceData}
  interval="5m" // 1m, 5m, 15m, 1h, 4h, 1d
  height={400}
  indicators={['volume', 'rsi', 'macd']}
  onIntervalChange={(interval) => setSelectedInterval(interval)}
/>

// Props interface
interface TokenChartProps {
  tokenAddress: string;
  data: CandlestickData[];
  interval: TimeInterval;
  height?: number;
  indicators?: string[];
  onIntervalChange?: (interval: TimeInterval) => void;
}
```

### **Context Providers & State Management**

#### **DataStreamProvider**
```typescript
// Provides real-time data via WebSocket
const DataStreamProvider = ({ children }) => {
  const [wsConnection, setWsConnection] = useState(null);
  const [tokenPrices, setTokenPrices] = useState({});
  
  useEffect(() => {
    // Establish WebSocket connection
    const ws = new WebSocket(WS_ENDPOINT);
    ws.onmessage = (event) => {
      const data = JSON.parse(event.data);
      if (data.type === 'price_update') {
        setTokenPrices(prev => ({
          ...prev,
          [data.tokenAddress]: data.price
        }));
      }
    };
    setWsConnection(ws);
    
    return () => ws.close();
  }, []);
  
  return (
    <DataStreamContext.Provider value={{
      tokenPrices,
      wsConnection,
      subscribeToToken: (address) => {
        ws.send(JSON.stringify({
          type: 'subscribe',
          tokenAddress: address
        }));
      }
    }}>
      {children}
    </DataStreamContext.Provider>
  );
};

// Usage in components
const TokenPrice = ({ tokenAddress }) => {
  const { tokenPrices, subscribeToToken } = useDataStream();
  
  useEffect(() => {
    subscribeToToken(tokenAddress);
  }, [tokenAddress]);
  
  return <span>${tokenPrices[tokenAddress]?.toFixed(6)}</span>;
};
```

#### **ExploreProvider**
```typescript
// Manages token exploration state
const ExploreProvider = ({ children }) => {
  const [tokens, setTokens] = useState([]);
  const [filters, setFilters] = useState({
    search: '',
    minMarketCap: 0,
    maxAge: null,
    launchpad: 'all'
  });
  const [sortBy, setSortBy] = useState('created_at');
  const [sortDirection, setSortDirection] = useState('desc');
  
  const filteredTokens = useMemo(() => {
    return tokens
      .filter(token => {
        if (filters.search && !token.name.toLowerCase().includes(filters.search.toLowerCase())) {
          return false;
        }
        if (filters.minMarketCap && token.marketCap < filters.minMarketCap) {
          return false;
        }
        if (filters.launchpad !== 'all' && token.launchpad !== filters.launchpad) {
          return false;
        }
        return true;
      })
      .sort((a, b) => {
        const aValue = a[sortBy];
        const bValue = b[sortBy];
        return sortDirection === 'asc' 
          ? aValue - bValue 
          : bValue - aValue;
      });
  }, [tokens, filters, sortBy, sortDirection]);
  
  return (
    <ExploreContext.Provider value={{
      tokens: filteredTokens,
      filters,
      setFilters,
      sortBy,
      setSortBy,
      sortDirection,
      setSortDirection
    }}>
      {children}
    </ExploreContext.Provider>
  );
};
```

## 🔧 Advanced Integration Patterns

### **Custom Hook for Token Operations**
```typescript
// src/hooks/useTokenOperations.ts
export function useTokenOperations() {
  const { publicKey } = useWallet();
  const { connection } = useConnection();
  
  const buyToken = async (tokenAddress: string, amountSOL: number) => {
    if (!publicKey) throw new Error('Wallet not connected');
    
    try {
      // 1. Get Jupiter quote
      const quote = await getJupiterQuote({
        inputMint: 'So11111111111111111111111111111111111111112', // SOL
        outputMint: tokenAddress,
        amount: amountSOL * LAMPORTS_PER_SOL,
        slippageBps: 300 // 3%
      });
      
      // 2. Get swap transaction
      const swapTransaction = await getJupiterSwapTransaction(quote);
      
      // 3. Sign and send
      const signature = await sendTransaction(swapTransaction, connection);
      
      // 4. Confirm transaction
      await connection.confirmTransaction(signature);
      
      return { success: true, signature };
    } catch (error) {
      return { success: false, error: error.message };
    }
  };
  
  const sellToken = async (tokenAddress: string, percentage: number) => {
    // Similar implementation for selling
  };
  
  const getTokenBalance = async (tokenAddress: string) => {
    if (!publicKey) return 0;
    
    const tokenAccounts = await connection.getParsedTokenAccountsByOwner(
      publicKey,
      { mint: new PublicKey(tokenAddress) }
    );
    
    if (tokenAccounts.value.length === 0) return 0;
    
    return tokenAccounts.value[0].account.data.parsed.info.tokenAmount.uiAmount;
  };
  
  return { buyToken, sellToken, getTokenBalance };
}
```

### **Real-Time Price Feed Integration**
```typescript
// src/hooks/usePriceFeed.ts
export function usePriceFeed(tokenAddress: string) {
  const [price, setPrice] = useState(null);
  const [priceHistory, setPriceHistory] = useState([]);
  const [loading, setLoading] = useState(true);
  
  useEffect(() => {
    // Fetch initial price data
    const fetchInitialData = async () => {
      try {
        const [currentPrice, history] = await Promise.all([
          fetchCurrentPrice(tokenAddress),
          fetchPriceHistory(tokenAddress, '24h')
        ]);
        
        setPrice(currentPrice);
        setPriceHistory(history);
      } catch (error) {
        console.error('Failed to fetch price data:', error);
      } finally {
        setLoading(false);
      }
    };
    
    fetchInitialData();
    
    // Set up real-time updates
    const ws = new WebSocket(`${WS_ENDPOINT}/price/${tokenAddress}`);
    ws.onmessage = (event) => {
      const data = JSON.parse(event.data);
      setPrice(data.price);
      setPriceHistory(prev => [...prev.slice(-99), data]);
    };
    
    return () => ws.close();
  }, [tokenAddress]);
  
  const priceChange24h = useMemo(() => {
    if (priceHistory.length < 2) return 0;
    const oldPrice = priceHistory[0].price;
    const newPrice = price || priceHistory[priceHistory.length - 1].price;
    return ((newPrice - oldPrice) / oldPrice) * 100;
  }, [price, priceHistory]);
  
  return {
    price,
    priceHistory,
    priceChange24h,
    loading
  };
}
```

## 🚀 Performance & Production Optimization

### **Bundle Size Optimization**
```typescript
// next.config.ts
const nextConfig = {
  // Enable bundle analyzer
  webpack: (config, { dev, isServer }) => {
    if (!dev && !isServer) {
      config.resolve.alias = {
        ...config.resolve.alias,
        // Tree-shake unused chart libraries
        'react-chartjs-2': 'react-chartjs-2/dist/index.esm.js',
      };
    }
    return config;
  },
  
  // Image optimization
  images: {
    domains: ['your-cdn.com', 'arweave.net'],
    formats: ['image/webp', 'image/avif'],
  },
  
  // Experimental features
  experimental: {
    optimizeCss: true,
    scrollRestoration: true,
  }
};
```

### **Data Fetching Optimization**
```typescript
// src/lib/swr-config.ts
export const swrConfig = {
  revalidateOnFocus: false,
  revalidateIfStale: false,
  revalidateOnReconnect: true,
  refreshInterval: 30000, // 30 seconds
  errorRetryCount: 3,
  errorRetryInterval: 5000,
  
  // Custom fetcher with error handling
  fetcher: async (url: string) => {
    const response = await fetch(url);
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    return response.json();
  },
  
  // Global error handler
  onError: (error, key) => {
    console.error(`SWR Error for ${key}:`, error);
    toast.error('Failed to fetch data');
  }
};

// Usage in components
const TokenList = () => {
  const { data: tokens, error, mutate } = useSWR(
    '/api/tokens',
    null,
    swrConfig
  );
  
  if (error) return <ErrorState onRetry={() => mutate()} />;
  if (!tokens) return <LoadingSkeleton />;
  
  return <TokenGrid tokens={tokens} />;
};
```

## 🛡️ Security & Error Handling

### **Input Validation & Sanitization**
```typescript
// src/lib/validation.ts
import { z } from 'zod';

export const TokenLaunchSchema = z.object({
  name: z.string().min(1).max(50).regex(/^[a-zA-Z0-9\s]+$/),
  symbol: z.string().min(1).max(10).regex(/^[A-Z0-9]+$/),
  supply: z.number().positive().max(1e15),
  description: z.string().max(500).optional(),
  website: z.string().url().optional(),
  twitter: z.string().url().optional(),
});

export const validateTokenLaunch = (data: unknown) => {
  try {
    return TokenLaunchSchema.parse(data);
  } catch (error) {
    if (error instanceof z.ZodError) {
      throw new Error(`Validation failed: ${error.errors.map(e => e.message).join(', ')}`);
    }
    throw error;
  }
};

// Usage in API routes
export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  try {
    const validatedData = validateTokenLaunch(req.body);
    // Process validated data
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
}
```

### **Error Boundary Implementation**
```typescript
// src/components/ErrorBoundary.tsx
import React from 'react';

interface ErrorBoundaryState {
  hasError: boolean;
  error?: Error;
}

export class ErrorBoundary extends React.Component<
  React.PropsWithChildren<{}>,
  ErrorBoundaryState
> {
  constructor(props: React.PropsWithChildren<{}>) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error: Error): ErrorBoundaryState {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    console.error('Error caught by boundary:', error, errorInfo);
    
    // Send to error tracking service
    if (typeof window !== 'undefined' && window.Sentry) {
      window.Sentry.captureException(error, {
        contexts: { react: errorInfo }
      });
    }
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="error-boundary">
          <h2>Something went wrong</h2>
          <p>{this.state.error?.message}</p>
          <button onClick={() => window.location.reload()}>
            Reload Page
          </button>
        </div>
      );
    }

    return this.props.children;
  }
}

// Usage in _app.tsx
function MyApp({ Component, pageProps }: AppProps) {
  return (
    <ErrorBoundary>
      <WalletProvider>
        <Component {...pageProps} />
      </WalletProvider>
    </ErrorBoundary>
  );
}
```

## 🎯 Production Deployment Checklist

### **Pre-Deployment Validation**
```bash
# 1. Build and test
pnpm build
pnpm start  # Test production build locally

# 2. Environment variables check
echo "Checking required environment variables..."
node -e "
const required = ['NEXT_PUBLIC_RPC_URL', 'NEXT_PUBLIC_NETWORK'];
const missing = required.filter(key => !process.env[key]);
if (missing.length) {
  console.error('Missing required env vars:', missing);
  process.exit(1);
}
console.log('✅ All required env vars present');
"

# 3. Security audit
pnpm audit --audit-level moderate

# 4. Type checking
pnpm type-check

# 5. Bundle size analysis
ANALYZE=true pnpm build
```

### **Production Environment Setup**
```bash
# Vercel deployment with environment variables
vercel env add NEXT_PUBLIC_RPC_URL production
vercel env add NEXT_PUBLIC_NETWORK production
vercel env add SENTRY_DSN production
vercel env add ANALYTICS_ID production

# Deploy to production
vercel --prod
```

---

**🎯 Ready for Production**: Your Fun Launch scaffold is now equipped with comprehensive AI guidance, production-ready patterns, and detailed implementation examples. Navigate back to `scaffolds/LLM.txt` for broader scaffold guidance or `studio/LLM.txt` for backend integration workflows.
